# -*- coding: utf-8 -*-
"""Titanic Classification Project Bharat Intern

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n2dJ_fYMZMc4vNlzRsD2rQsj2yYuAMoU

# **SANYA CHOUDHARY**
# Task 1 -->
#  ..Titanic Classification..

# **Importing the Dependencies**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# **Data Collection & Processing**"""

# load the data from csv file to Pandas Dataframe
titanic_data = pd.read_csv('/content/train.csv')

# printing the first 5 rows of the dataframe
titanic_data.head()

# number of rows and columns
titanic_data.shape

# gatting some informations about the data
titanic_data.info()

# check the number of missing values in each column
titanic_data.isnull().sum()

"""# **Handling the Missing values**"""

# drop the "Cabin" column from the Dataframe
titanic_data = titanic_data.drop(columns='Cabin', axis=1)

# replacing the missing values in "Age" column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)

# finding the mode value of "Embarked" column
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

# replacing the missing value in "Embarked" column with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)

# check the number of missing values in each column
titanic_data.isnull().sum()

"""# **Data Analysis**"""

# getting some statistical measures about the data
titanic_data.describe()

# finding the number of people survived and not survived
titanic_data['Survived'].value_counts()

"""# **Data Visualization**"""

sns.set()
sns.countplot()

# finding the number of people survived
titanic_data['Survived'].value_counts()

#Count plot on the basis of "Survived"
sns.countplot(data= titanic_data, x="Survived")

titanic_data['Sex'].value_counts()

#Count plot on the basis of "Sex"
sns.countplot(data= titanic_data, x="Sex")

# number of survivors Gender wise
sns.countplot(data=titanic_data, x="Sex", hue='Survived')

# making a countplot for "Pclass" column
sns.countplot(data=titanic_data, x='Pclass')

sns.countplot(data=titanic_data, x="Pclass", hue='Survived')

# making a countplot for "Age" column
sns.countplot(data=titanic_data, x='Age')

sns.countplot(data=titanic_data, x="Age", hue='Survived')

# making a countplot for "SibSp" column
sns.countplot(data=titanic_data, x='SibSp')

# making a countplot for "SibSp" column
sns.countplot(data=titanic_data, x="SibSp", hue='Survived')

# making a countplot for "Parch" column
sns.countplot(data=titanic_data, x='Parch')

sns.countplot(data=titanic_data, x="Parch", hue='Survived')

# making a countplot for "Ticket" column
sns.countplot(data=titanic_data, x='Ticket')

sns.countplot(data=titanic_data, x="Ticket", hue='Survived')

# making a countplot for "Fare" column
sns.countplot(data=titanic_data, x='Fare')

sns.countplot(data=titanic_data, x="Fare", hue='Survived')

# making a countplot for "Embarked" column
sns.countplot(data=titanic_data, x='Embarked')

# making a countplot for "Embarked" column
sns.countplot(data=titanic_data, x="Embarked", hue='Survived')

"""# **Encoding the Categorical Columns**"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

# converting categorical columns

titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic_data.head()

"""# **Separating Features & Target**"""

X = titanic_data.drop(columns = ['PassengerId','Name','Ticket','Survived'], axis=1)
Y = titanic_data['Survived']

print(X)

print(Y)

"""# **Splitting the data into training data & Test data**"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=3)

print(X.shape, X_train.shape, X_test.shape)

"""## **Model Training**

# Logistic Regression
"""

model = LogisticRegression()

# training the Logistic Regression model with training data
model.fit(X_train, Y_train)

"""# **Model Evaluation**

# Accuracy score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)

print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)

print(X_test_prediction )

test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accurcay score of test data :', test_data_accuracy)

"""# **Building a Predictive System on giving Input**"""

input_data= (1,0,46,0,1,5.28,9)
# change the input array into numpy array
input_as_numpy = np.asarray(input_data)

#reshape the numpy array as we are predicting for only one instance
input_reshaped = input_as_numpy.reshape(1,-1)
prediction = model.predict(input_reshaped)

print(prediction)
if (prediction[0]==0):
   print(" THE PERSON WON'T BE SAVED FROM SINKING. ")
else:
   print("  THE PERSON WILL BE SAVED FROM SINKING.")

